// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------
// App-specific Models
// ---------------------
model LoyaltyAccount {
  id              String                @id @default(cuid())
  name            String
  customName      String?
  balance         Int
  date            DateTime
  category        String
  userId          String
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  history         HistoryEntry[]
  spending        SpendingTransaction[]
  card            String?
  cardOpenDate    DateTime?
  annualFee       Int?
  signupBonus     Int?
  accountIdNumber String?
  notes           String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([userId])
}

model HistoryEntry {
  id               String               @id @default(cuid())
  loyaltyAccountId String
  account          LoyaltyAccount       @relation(fields: [loyaltyAccountId], references: [id], onDelete: Cascade)
  balance          Int
  date             DateTime
  reason           String?
  createdAt        DateTime             @default(now())
  transactionId    String?
  transaction      SpendingTransaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)

  @@index([loyaltyAccountId])
  @@index([transactionId])
}

model SpendingTransaction {
  id               String          @id @default(cuid())
  loyaltyAccountId String
  account          LoyaltyAccount  @relation(fields: [loyaltyAccountId], references: [id], onDelete: Cascade)
  pointsUsed       Int
  type             TransactionType @default(SPEND)
  reason           String
  partnerName      String?
  transferBonus    Int?
  notes            String?
  date             DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  historyEntries   HistoryEntry[]

  @@index([loyaltyAccountId])
}

// ---------------------
// NextAuth.js Models
// ---------------------
model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  accounts        Account[]
  sessions        Session[]
  loyaltyAccounts LoyaltyAccount[]
}

// NextAuth account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

enum TransactionType {
  SPEND
  EARN
}